generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  name            String?           @unique
  password        String
  createdAt       DateTime          @default(now())
  organisations   UserOrganisation[] 
  notifications   Notification[]    // Relation to notifications
}

model Organisation {
  id              Int               @id @default(autoincrement())
  name            String
  Termsheetname   String?
  status          String?           @default("not uploaded")
  senderemail     String?
  createdAt       DateTime          @default(now())
  users           UserOrganisation[]
  termsheets      Termsheet[]
}

model UserOrganisation {
  userId          Int
  organisationId  Int
  role            String 
  createdAt       DateTime          @default(now())
  user            User              @relation(fields: [userId], references: [id])
  organisation    Organisation      @relation(fields: [organisationId], references: [id])
  @@id([userId, organisationId]) 
} 
  
model Termsheet {
  id                   Int           @id @default(autoincrement())
  title                String
  description          String?
  mapsheetFileId       Int?
  status               String @default("TO BE STRUCTURIZED")
  structuredsheetFileId Int?
  ourtermsheetFileId   Int?
  validatedsheetFileId Int?
  coloursheetFileId  Int?
  coloursheetFile   File?         @relation("ColouredsheetFile", fields: [coloursheetFileId], references: [id])
  organisationId       Int
  createdAt            DateTime      @default(now())
  mapsheetFile         File?         @relation("MapsheetFile", fields: [mapsheetFileId], references: [id])
  structuredsheetFile  File?         @relation("StructuredsheetFile", fields: [structuredsheetFileId], references: [id])
  ourtermsheetFile     File?         @relation("OurtermsheetFile", fields: [ourtermsheetFileId], references: [id])
  validatedsheetFile   File?         @relation("ValidatedsheetFile", fields: [validatedsheetFileId], references: [id])
  organisation         Organisation  @relation(fields: [organisationId], references: [id])
  discrepancies        Discrepancy[]
}

model Discrepancy {
  id              Int           @id @default(autoincrement())
  role            String?  
  score           String?      
  content         String?
  suggestion      String?
  field           String?
  acceptedbyrole  Boolean?
  acceptedbyadmin Boolean?     
  termsheetId     Int
  createdAt       DateTime      @default(now())
  termsheet       Termsheet     @relation(fields: [termsheetId], references: [id])
}

model File {
  id                  Int         @id @default(autoincrement())
  s3Link              String
  type                String?
  createdAt           DateTime    @default(now())
  mapsheetTermsheets  Termsheet[] @relation("MapsheetFile")
  structuredTermsheets Termsheet[] @relation("StructuredsheetFile")
  ourtermTermsheets   Termsheet[] @relation("OurtermsheetFile")  
  validatedTermsheets Termsheet[] @relation("ValidatedsheetFile")
  colourTermsheets   Termsheet[] @relation("ColouredsheetFile")
}
model Notification {
  id              Int           @id @default(autoincrement())
  type            String?       
  content         String?
  seen            Boolean?       @default(false) 
  createdAt       DateTime      @default(now())
  userId          Int?
  user            User?          @relation(fields: [userId], references: [id])
}